// ‚úÖ Declaramos una funci√≥n as√≠ncrona que retorna una promesa
const fnAsync = async () => {
    // üì¶ Creamos una nueva promesa que resuelve despu√©s de 2 segundos
    return await new Promise((resolve, reject) => {
        (true)
            ? setTimeout(() => resolve('Async!! 200'), 2000)
            : reject(new Error('Error! 501'));
    });
};

// ‚úÖ Otra funci√≥n as√≠ncrona que llama a fnAsync y espera su resultado
const fnAsync2 = async () => {
    const something = await fnAsync();    // ‚è≥ Espera el resultado de fnAsync()
    console.log(something);               // üñ®Ô∏è Imprime 'Async!! 200'
    console.log('Hello!! 200');           // üñ®Ô∏è Luego imprime otro mensaje
};

// üß™ Llamada a la funci√≥n
console.log('Before');    // ‚è±Ô∏è Se ejecuta inmediatamente
fnAsync2();               // ‚è≥ Llama a la funci√≥n as√≠ncrona (pero no espera en este hilo)
console.log('After');     // ‚è±Ô∏è Se imprime inmediatamente despu√©s de 'Before'

// ‚è≥ Salida esperada (despu√©s de ~2 segundos):
// Before
// After
// Async!! 200
// Hello!! 200
// üìù Nota: La ejecuci√≥n de fnAsync2() es as√≠ncrona, por lo que 'After' se imprime antes de que se resuelva la promesa.

// ‚úÖ Manejo de errores con try/catch

// Ejemplo 1: Funci√≥n async con rechazo y sin manejo de errores
const fnAsyncError = async () => {
  return await new Promise((resolve, reject) => {
    setTimeout(() => reject(new Error('Error intencional sin try/catch')), 1000);
  });
};

fnAsyncError()
  .then(res => console.log('√âxito:', res))
  .catch(err => console.error('Capturado con .catch:', err.message));

// Ejemplo 2: Funci√≥n async con manejo de errores usando try/catch
const fnAsyncTryCatch = async () => {
  try {
    const result = await new Promise((resolve, reject) => {
      setTimeout(() => reject(new Error('Error intencional con try/catch')), 1000);
    });
    console.log('Resultado:', result);
  } catch (error) {
    console.error('Capturado con try/catch:', error.message);
  }
};

fnAsyncTryCatch();

// Ejemplo 3: Error lanzado expl√≠citamente dentro de funci√≥n async
const fnThrowInside = async () => {
  throw new Error('Error lanzado expl√≠citamente dentro de async');
};

fnThrowInside()
  .then(() => console.log('No deber√≠a llegar aqu√≠'))
  .catch(err => console.error('Capturado error expl√≠cito:', err.message));

// Ejemplo 4: Funci√≥n async con error de sintaxis (ejemplo que causa error inmediato)
const fnSyntaxError = async () => {
  // Error: uso de variable no declarada
  console.log(nonExistentVariable);
};

fnSyntaxError()
  .then(() => console.log('No deber√≠a llegar aqu√≠'))
  .catch(err => console.error('Capturado error de referencia:', err.message));

// Ejemplo 5: Uso incorrecto de await fuera de funci√≥n async (causa error de sintaxis)
// Para verlo comentar el bloque siguiente, porque romper√° el script entero

/*
console.log('Antes de usar await fuera de async');
await Promise.resolve('Esto dar√° error'); // SyntaxError
console.log('Despu√©s'); // Nunca se ejecuta
*/

// Nota: el error de syntax por usar await fuera de async solo ocurre en top-level JS sin m√≥dulos o entorno compatible
